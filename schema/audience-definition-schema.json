{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AbsoluteDate": {
      "additionalProperties": false,
      "description": "Represents an absolute date/time value. Examples: 1. ISO 8601 date:    { absolute: \"2023-01-01T00:00:00Z\" }\n\n2. Date only:    { absolute: \"2023-01-01\" }\n\n3. Date with timezone:    { absolute: \"2023-01-01T00:00:00-05:00\" }",
      "properties": {
        "absolute": {
          "type": "string"
        }
      },
      "required": [
        "absolute"
      ],
      "type": "object"
    },
    "AggregationOperator": {
      "description": "Represents operators for aggregating multiple values. Examples:\n- \"min\": [1, 2, 3] // result: 1\n- \"max\": [1, 2, 3] // result: 3\n- \"avg\": [1, 2, 3] // result: 2\n- \"count\": [1, 2, 3] // result: 3",
      "enum": [
        "min",
        "max",
        "sum",
        "avg",
        "list",
        "count"
      ],
      "type": "string"
    },
    "ArithmeticOperator": {
      "description": "Represents mathematical operators for numeric calculations. Examples:\n- \"plus\": { value1: 5, value2: 3 } // result: 8\n- \"multiply\": { value1: 4, value2: 2 } // result: 8\n- \"mod\": { value1: 10, value2: 3 } // result: 1",
      "enum": [
        "plus",
        "minus",
        "multiply",
        "divide",
        "mod"
      ],
      "type": "string"
    },
    "Audience": {
      "additionalProperties": false,
      "description": "Represents a complete audience definition with a root logical query. Examples: 1. Simple audience:    {      \"schema_version\": \"1.0.0\",      \"audience\": {        \"operator\": \"and\",        \"queries\": [          { \"query\": { \"model\": \"user\" } },          { \"query\": { \"model\": \"purchase\", \"expression\": { \"operator\": \"equals\", \"left\": { \"path\": \"status\" }, \"right\": \"completed\" } } }        ]      }    }\n\n2. Audience with nested logic:    {      \"schema_version\": \"1.0.0\",      \"audience\": {        \"operator\": \"or\",        \"queries\": [          { \"query\": { \"model\": \"user\", \"expression\": { \"operator\": \"equals\", \"left\": { \"path\": \"country\" }, \"right\": \"US\" } } },          {            \"operator\": \"and\",            \"queries\": [              { \"query\": { \"model\": \"signup\", \"expression\": { \"operator\": \"equals\", \"left\": { \"path\": \"status\" }, \"right\": \"completed\" } } },              { \"query\": { \"model\": \"user\", \"expression\": { \"operator\": \"greater_than\", \"left\": { \"path\": \"age\" }, \"right\": 18 } } }            ]          }        ]      }    }",
      "properties": {
        "audience": {
          "$ref": "#/definitions/LogicalAudienceQueries",
          "title": "Audience"
        },
        "schema_version": {
          "$ref": "#/definitions/Version"
        }
      },
      "required": [
        "schema_version",
        "audience"
      ],
      "type": "object",
      "title": "AudienceDefinition"
    },
    "AudienceQuery": {
      "additionalProperties": false,
      "description": "Represents a query that can be either a general query, an event query, or a user query. Examples: 1. General query:    { \"query\": { \"model\": \"user\", \"expression\": { \"operator\": \"equals\", \"left\": { \"path\": \"age\" }, \"right\": 30 } } }",
      "properties": {
        "query": {
          "$ref": "#/definitions/Query"
        }
      },
      "required": [
        "query"
      ],
      "type": "object"
    },
    "BinaryOperator": {
      "description": "Represents binary operators that compare two values. Examples:\n- \"equals\": { value1: 5, value2: 5 }\n- \"less_than\": { value1: 3, value2: 5 }\n- \"matches\": { value1: \"pattern\", value2: \"text\" }\n- \"contains\": { value1: \"string\", value2: \"substring\" }",
      "enum": [
        "equals",
        "less_than",
        "less_than_equal",
        "greater_than",
        "greater_than_equal",
        "matches",
        "contains"
      ],
      "type": "string"
    },
    "CountExpression": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "additionalProperties": false,
          "properties": {
            "operand": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "$ref": "#/definitions/BinaryOperator"
            }
          },
          "required": [
            "operator",
            "operand"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "expressions": {
              "items": {
                "$ref": "#/definitions/CountExpression"
              },
              "type": "array"
            },
            "operator": {
              "$ref": "#/definitions/LogicalOperator"
            }
          },
          "required": [
            "operator",
            "expressions"
          ],
          "type": "object"
        }
      ],
      "description": "Represents a count expression, which can be a number, a binary operation, or a logical group. Examples: 1. Simple count:    5\n\n2. Binary count expression:    { operator: \"greater_than\", operand: { path: \"event.count\" } }\n\n3. Logical group of count expressions:    {      operator: \"and\",      expressions: [        1,        { operator: \"greater_than\", operand: { path: \"event.count\" } }      ]    }"
    },
    "DateExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/AbsoluteDate"
        },
        {
          "$ref": "#/definitions/RelativeDate"
        },
        {
          "additionalProperties": false,
          "properties": {
            "operand": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AbsoluteDate"
                },
                {
                  "$ref": "#/definitions/RelativeDate"
                }
              ]
            },
            "operator": {
              "$ref": "#/definitions/BinaryOperator"
            }
          },
          "required": [
            "operator",
            "operand"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "expressions": {
              "items": {
                "$ref": "#/definitions/DateExpression"
              },
              "type": "array"
            },
            "operator": {
              "$ref": "#/definitions/LogicalOperator"
            }
          },
          "required": [
            "operator",
            "expressions"
          ],
          "type": "object"
        }
      ],
      "description": "Represents an expression that evaluates to a date or date-based condition. Examples: 1. Absolute date:    { absolute: \"2023-01-01T00:00:00Z\" }\n\n2. Relative date:    { relative: { offset: -30, unit: \"day\" } }\n\n3. Date with binary operator:    { operator: \"greater_than\", operand: { absolute: \"2023-01-01T00:00:00Z\" } }\n\n4. Logical combination of dates:    {      operator: \"and\",      expressions: [        { absolute: \"2023-01-01T00:00:00Z\" },        { operator: \"less_than\", operand: { relative: { offset: 0, unit: \"month\", boundary: \"end\" } } }      ]    }"
    },
    "DateOperand": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "date": {
              "$ref": "#/definitions/AbsoluteDate"
            }
          },
          "required": [
            "date"
          ],
          "type": "object",
          "title": "AbsoluteDateOperand"
        },
        {
          "additionalProperties": false,
          "properties": {
            "date": {
              "$ref": "#/definitions/RelativeDate"
            }
          },
          "required": [
            "date"
          ],
          "type": "object",
          "title": "RelativeDateOperand"
        }
      ],
      "description": "Represents a date value that can be either absolute or relative. Examples: 1. Absolute date:    { date: { absolute: \"2023-01-01T00:00:00Z\" } }\n\n2. Relative date (30 days ago):    { date: { relative: { offset: -30, unit: \"day\" } } }\n\n3. Relative date (start of current month):    { date: { relative: { offset: 0, unit: \"month\", boundary: \"start\" } } }"
    },
    "DateUnit": {
      "description": "Represents units of time that can be used in relative date calculations. Examples:\n- 'second': 1 second\n- 'minute': 60 seconds\n- 'hour': 60 minutes\n- 'day': 24 hours\n- 'week': 7 days\n- 'month': ~30 days\n- 'quarter': 3 months\n- 'year': 12 months",
      "enum": [
        "second",
        "minute",
        "hour",
        "day",
        "week",
        "month",
        "quarter",
        "year"
      ],
      "type": "string"
    },
    "DistanceUnit": {
      "enum": [
        "meters",
        "miles",
        "kilometers"
      ],
      "type": "string"
    },
    "Expression": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "expression": {
              "$ref": "#/definitions/Expression"
            },
            "model": {
              "type": "string"
            }
          },
          "required": [
            "model",
            "expression"
          ],
          "type": "object",
          "title": "JoinExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "expression": {
              "$ref": "#/definitions/Expression"
            },
            "operator": {
              "const": "not",
              "type": "string"
            }
          },
          "required": [
            "operator",
            "expression"
          ],
          "type": "object",
          "title": "UnaryExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "operand": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "const": "exists",
              "type": "string"
            }
          },
          "required": [
            "operator",
            "operand"
          ],
          "type": "object",
          "title": "ExistsExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "left": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "$ref": "#/definitions/BinaryOperator"
            },
            "right": {
              "$ref": "#/definitions/Operand"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object",
          "title": "BinaryExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "condition": {
              "$ref": "#/definitions/Expression"
            },
            "expression": {
              "$ref": "#/definitions/ModelPath"
            },
            "group_by": {
              "type": "string"
            },
            "operator": {
              "$ref": "#/definitions/AggregationOperator"
            }
          },
          "required": [
            "operator",
            "group_by",
            "expression",
            "condition"
          ],
          "type": "object",
          "title": "ModelAggregationExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "expressions": {
              "items": {
                "$ref": "#/definitions/Expression"
              },
              "type": "array"
            },
            "operator": {
              "$ref": "#/definitions/LogicalOperator"
            }
          },
          "required": [
            "operator",
            "expressions"
          ],
          "type": "object",
          "title": "LogicalExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "left": {
              "$ref": "#/definitions/LocationOperand"
            },
            "operator": {
              "$ref": "#/definitions/LocationOperator"
            },
            "right": {
              "$ref": "#/definitions/ModelPath"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object",
          "title": "LocationLeftExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "left": {
              "$ref": "#/definitions/ModelPath"
            },
            "operator": {
              "$ref": "#/definitions/LocationOperator"
            },
            "right": {
              "$ref": "#/definitions/LocationOperand"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object",
          "title": "LocationRightExpression"
        }
      ],
      "description": "Represents a complex expression that can evaluate to true, false, or noop. Examples: 1. Join expression (combining expressions from different models):    {      \"model\": \"user\",      \"expression\": {        \"operator\": \"equals\",        \"left\": { \"path\": \"age\" },        \"right\": 18      }    }\n\n2. Logical expression (AND):    {      \"operator\": \"and\",      \"expressions\": [        { \"operator\": \"equals\", \"left\": { \"path\": \"country\" }, \"right\": \"US\" },        { \"operator\": \"greater_than\", \"left\": { \"path\": \"age\" }, \"right\": 18 }      ]    }\n\n3. Location expression:    {      \"operator\": \"within\",      \"left\": { \"location\": { \"latitude\": 37.7749, \"longitude\": -122.4194, \"distance\": { \"value\": 10, \"unit\": \"miles\" } } },      \"right\": { \"model\": \"user\", \"path\": \"location\" }    }"
    },
    "ListOperator": {
      "description": "Represents operators that work with lists of values. Examples:\n- \"contains\": { list: [1, 2, 3], value: 2 }\n- \"between\": { list: [1, 10], value: 5 }\n- \"match_any\": { list: [\"a\", \"b\"], value: \"a\" }\n- \"in\": { list: [1, 2, 3], value: 2 }",
      "enum": [
        "contains",
        "between",
        "match_any",
        "match_all",
        "in"
      ],
      "type": "string"
    },
    "Location": {
      "additionalProperties": false,
      "description": "Represents a geographic location, optionally with a distance constraint. Examples: 1. Simple location:    { \"latitude\": 37.7749, \"longitude\": -122.4194 }\n\n2. Location with distance in miles:    { \"latitude\": 40.7128, \"longitude\": -74.0060, \"distance\": { \"value\": 10, \"unit\": \"miles\" } }\n\n3. Location with distance in kilometers:    { \"latitude\": 51.5074, \"longitude\": -0.1278, \"distance\": { \"value\": 5, \"unit\": \"kilometers\" } }",
      "properties": {
        "distance": {
          "additionalProperties": false,
          "properties": {
            "unit": {
              "$ref": "#/definitions/DistanceUnit"
            },
            "value": {
              "type": "number"
            }
          },
          "required": [
            "value",
            "unit"
          ],
          "type": "object"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ],
      "type": "object"
    },
    "LocationExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/Location"
        },
        {
          "additionalProperties": false,
          "properties": {
            "operand": {
              "$ref": "#/definitions/Location"
            },
            "operator": {
              "$ref": "#/definitions/LocationOperator"
            }
          },
          "required": [
            "operator",
            "operand"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "expressions": {
              "items": {
                "$ref": "#/definitions/LocationExpression"
              },
              "type": "array"
            },
            "operator": {
              "$ref": "#/definitions/LogicalOperator"
            }
          },
          "required": [
            "operator",
            "expressions"
          ],
          "type": "object"
        }
      ],
      "description": "Represents an expression that evaluates to a location or location-based condition. Examples: 1. Simple location:    { latitude: 40.7128, longitude: -74.0060, distance: { value: 5, unit: \"miles\" } }\n\n2. Location with operator:    { operator: \"within\", operand: { latitude: 40.7128, longitude: -74.0060, distance: { value: 5, unit: \"miles\" } } }\n\n3. Logical combination of locations:    {      operator: \"or\",      expressions: [        { latitude: 40.7128, longitude: -74.0060, distance: { value: 5, unit: \"miles\" } },        { operator: \"within\", operand: { latitude: 34.0522, longitude: -118.2437, distance: { value: 10, unit: \"miles\" } } }      ]    }"
    },
    "LocationOperand": {
      "additionalProperties": false,
      "description": "Represents a location value that can be used in location-based expressions. Examples: 1. Simple location (latitude/longitude only):    { location: { latitude: 40.7128, longitude: -74.0060 } }\n\n2. Location with distance in miles:    { location: { latitude: 40.7128, longitude: -74.0060, distance: { value: 5, unit: \"miles\" } } }\n\n3. Location with distance in meters:    { location: { latitude: 40.7128, longitude: -74.0060, distance: { value: 1000, unit: \"meters\" } } }",
      "properties": {
        "location": {
          "$ref": "#/definitions/Location"
        }
      },
      "required": [
        "location"
      ],
      "type": "object"
    },
    "LocationOperator": {
      "description": "Represents operators for location-based comparisons. Examples:\n- \"within\": { location1: { lat: 40, lng: -74 }, location2: { lat: 40, lng: -74 }, radius: 5 }\n- \"equals\": { location1: { lat: 40, lng: -74 }, location2: { lat: 40, lng: -74 } }",
      "enum": [
        "within",
        "equals"
      ],
      "type": "string"
    },
    "LogicalAudienceQueries": {
      "additionalProperties": false,
      "description": "Represents a logical combination of audience queries using AND/OR operators. Examples: 1. Simple AND combination:    {      \"operator\": \"and\",      \"queries\": [        { \"query\": { \"model\": \"user\" } },        { \"query\": { \"model\": \"purchase\", \"expression\": { \"operator\": \"equals\", \"left\": { \"path\": \"status\" }, \"right\": \"completed\" } } }      ]    }\n\n2. Nested logical combinations:    {      \"operator\": \"or\",      \"queries\": [        { \"query\": { \"model\": \"user\" } },        {          \"operator\": \"and\",          \"queries\": [            { \"query\": { \"model\": \"purchase\" } },            { \"query\": { \"model\": \"user\" } }          ]        }      ]    }\n\n3. Deeply nested combination:    {      \"operator\": \"and\",      \"queries\": [        {          \"operator\": \"or\",          \"queries\": [            { \"query\": { \"model\": \"user\" } },            { \"query\": { \"model\": \"signup\", \"expression\": { \"operator\": \"equals\", \"left\": { \"path\": \"status\" }, \"right\": \"completed\" } } }          ]        },        { \"query\": { \"model\": \"user\", \"expression\": { \"operator\": \"equals\", \"left\": { \"path\": \"country\" }, \"right\": \"CA\" } } }      ]    }",
      "properties": {
        "operator": {
          "$ref": "#/definitions/LogicalOperator"
        },
        "queries": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/LogicalAudienceQueries"
              },
              {
                "$ref": "#/definitions/AudienceQuery"
              }
            ]
          },
          "type": "array"
        }
      },
      "required": [
        "operator",
        "queries"
      ],
      "type": "object"
    },
    "LogicalOperator": {
      "description": "Represents logical operators for combining multiple conditions. Examples:\n- \"and\": { condition1: true, condition2: true } // result: true\n- \"or\": { condition1: true, condition2: false } // result: true",
      "enum": [
        "and",
        "or"
      ],
      "type": "string"
    },
    "ModelPath": {
      "additionalProperties": false,
      "description": "Represents a model path reference within a data model. Examples: 1. Simple model path:    { \"model\": \"user\", \"path\": \"email\" }\n\n2. Nested model path:    { \"model\": \"order\", \"path\": \"items.productId\" }\n\n3. Deeply nested model path:    { \"model\": \"event\", \"path\": \"attributes.purchase.amount\" }",
      "properties": {
        "model": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      },
      "required": [
        "model",
        "path"
      ],
      "type": "object"
    },
    "Operand": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "number"
        },
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/DateOperand"
        },
        {
          "$ref": "#/definitions/ModelPath",
          "title": "PathOperand"
        },
        {
          "additionalProperties": false,
          "properties": {
            "left": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "$ref": "#/definitions/ArithmeticOperator"
            },
            "right": {
              "$ref": "#/definitions/Operand"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object",
          "title": "ArithmeticOperand"
        }
      ],
      "description": "Represents a value that can be used in expressions, including primitive values, paths, and arithmetic operations. Examples: 1. Primitive values:    true    42    \"hello\"\n\n2. Path reference:    { path: \"user.age\" }\n\n3. Arithmetic operation:    {      operator: \"plus\",      left: { path: \"price\" },      right: { path: \"tax\" }    }\n\n4. Nested arithmetic operation:    {      operator: \"multiply\",      left: { operator: \"plus\", left: { path: \"base_price\" }, right: { path: \"shipping\" } },      right: 1.1    }\n\n5. Date operand:    { date: { absolute: \"2023-01-01T00:00:00Z\" } }"
    },
    "PathExpression": {
      "anyOf": [
        {
          "type": "boolean",
          "title": "BooleanPathExpression"
        },
        {
          "type": "number",
          "title": "NumberPathExpression"
        },
        {
          "type": "string",
          "title": "StringPathExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "expression": {
              "$ref": "#/definitions/PathExpression"
            },
            "operator": {
              "$ref": "#/definitions/UnaryOperator"
            }
          },
          "required": [
            "operator",
            "expression"
          ],
          "type": "object",
          "title": "UnaryPathExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "operand": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "$ref": "#/definitions/BinaryOperator"
            }
          },
          "required": [
            "operator",
            "operand"
          ],
          "type": "object",
          "title": "BinaryPathExpression"
        }
      ],
      "description": "Represents an expression that evaluates to a path or value. Examples: 1. Primitive values:    true    42    \"hello\"\n\n2. Unary expression (NOT):    {      operator: \"not\",      expression: { operator: \"equals\", operand: { path: \"status\" } }    }\n\n3. Binary expression (comparing a path to a value):    {      operator: \"equals\",      operand: { path: \"user.age\" }    }"
    },
    "Query": {
      "additionalProperties": false,
      "description": "Represents a base query with a model and optional expression. Examples: 1. Simple query without expression:    { model: \"user\" }\n\n2. Query with expression:    {      model: \"user\",      expression: { operator: \"equals\", left: { path: \"age\" }, right: 25 }    }\n\n3. Query with multiple models and a logical expression:    {      model: \"user\",      expression: {        operator: \"and\",        expressions: [          { operator: \"equals\", left: { path: \"country\" }, right: \"US\" },          { operator: \"greater_than\", left: { path: \"age\" }, right: 18 }        ]      }    }",
      "properties": {
        "expression": {
          "$ref": "#/definitions/Expression"
        }
      },
      "type": "object"
    },
    "RelativeDate": {
      "additionalProperties": false,
      "description": "Represents a date/time relative to the current time. Examples: 1. 7 days ago:    { relative: { offset: -7, unit: \"day\" } }\n\n2. Start of current month:    { relative: { offset: 0, unit: \"month\", boundary: \"start\" } }\n\n3. End of previous quarter:    { relative: { offset: -1, unit: \"quarter\", boundary: \"end\" } }",
      "properties": {
        "relative": {
          "additionalProperties": false,
          "properties": {
            "boundary": {
              "enum": [
                "start",
                "end",
                "middle"
              ],
              "type": "string"
            },
            "offset": {
              "type": "number"
            },
            "unit": {
              "$ref": "#/definitions/DateUnit"
            }
          },
          "required": [
            "offset",
            "unit"
          ],
          "type": "object"
        }
      },
      "required": [
        "relative"
      ],
      "type": "object"
    },
    "SingleModelExpression": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "expression": {
              "$ref": "#/definitions/SingleModelExpression"
            },
            "operator": {
              "const": "not",
              "type": "string"
            }
          },
          "required": [
            "operator",
            "expression"
          ],
          "type": "object",
          "title": "NotSingleModelExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "operand": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "const": "exists",
              "type": "string"
            }
          },
          "required": [
            "operator",
            "operand"
          ],
          "type": "object",
          "title": "ExistsSingleModelExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "left": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "$ref": "#/definitions/BinaryOperator"
            },
            "right": {
              "$ref": "#/definitions/Operand"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object",
          "title": "BinarySingleModelExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "expressions": {
              "items": {
                "$ref": "#/definitions/SingleModelExpression"
              },
              "type": "array"
            },
            "operator": {
              "$ref": "#/definitions/LogicalOperator"
            }
          },
          "required": [
            "operator",
            "expressions"
          ],
          "type": "object",
          "title": "LogicalSingleModelExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "left": {
              "$ref": "#/definitions/LocationOperand"
            },
            "operator": {
              "$ref": "#/definitions/LocationOperator"
            },
            "right": {
              "additionalProperties": false,
              "properties": {
                "path": {
                  "type": "string"
                }
              },
              "required": [
                "path"
              ],
              "type": "object"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object",
          "title": "LocationSingleModelExpression"
        },
        {
          "additionalProperties": false,
          "properties": {
            "left": {
              "additionalProperties": false,
              "properties": {
                "path": {
                  "type": "string"
                }
              },
              "required": [
                "path"
              ],
              "type": "object"
            },
            "operator": {
              "$ref": "#/definitions/LocationOperator"
            },
            "right": {
              "$ref": "#/definitions/LocationOperand"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object",
          "title": "LocationRightSingleModelExpression"
        }
      ],
      "description": "Represents an expression that operates within a single model context. Examples: 1. Unary expression (NOT):    {      operator: \"not\",      expression: {        operator: \"equals\",        left: { path: \"status\" },        right: \"inactive\"      }    }\n\n2. Binary expression (comparing two values):    {      operator: \"greater_than\",      left: { path: \"price\" },      right: 100    }\n\n3. Logical expression group (AND):    {      operator: \"and\",      expressions: [        { operator: \"equals\", left: { path: \"country\" }, right: \"US\" },        { operator: \"greater_than\", left: { path: \"age\" }, right: 18 }      ]    }\n\n4. Location expression (comparing locations):    {      operator: \"within\",      left: {        location: {          latitude: 40.7128,          longitude: -74.0060,          distance: { value: 5, unit: \"miles\" }        }      },      right: { path: \"user.location\" }    }"
    },
    "UnaryOperator": {
      "description": "Represents unary operators that operate on a single value. Examples:\n- \"not\": Negates a boolean expression\n- \"exist\": Checks if a value exists",
      "enum": [
        "not",
        "exist"
      ],
      "type": "string"
    },
    "Version": {
      "type": [
        "string"
      ]
    }
  }
}
