{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AbsoluteDate": {
      "additionalProperties": false,
      "description": "Represents an absolute date/time value.\nExamples:\n1. ISO 8601 date:\n{ absolute: \"2023-01-01T00:00:00Z\" }\n\n2. Date only:\n{ absolute: \"2023-01-01\" }\n\n3. Date with timezone:\n{ absolute: \"2023-01-01T00:00:00-05:00\" }",
      "properties": {
        "absolute": {
          "type": "string"
        }
      },
      "required": [
        "absolute"
      ],
      "title": "AbsoluteDate",
      "type": "object"
    },
    "AggregateNumberExpression": {
      "additionalProperties": false,
      "properties": {
        "condition": {
          "$ref": "#/definitions/BoolExpression"
        },
        "group_by_model": {
          "type": "string"
        },
        "operand": {
          "$ref": "#/definitions/NumberExpression"
        },
        "operator": {
          "$ref": "#/definitions/AggregationNumberOperator"
        }
      },
      "required": [
        "group_by_model",
        "operand",
        "operator"
      ],
      "title": "AggregateNumberExpression",
      "type": "object"
    },
    "AggregationNumberOperator": {
      "description": "Represents operators for aggregating multiple values. Examples:\n- \"min\": [1, 2, 3] // result: 1\n- \"max\": [1, 2, 3] // result: 3\n- \"avg\": [1, 2, 3] // result: 2\n- \"count\": [1, 2, 3] // result: 3",
      "enum": [
        "min",
        "max",
        "sum",
        "avg",
        "list",
        "count"
      ],
      "type": "string"
    },
    "Audience": {
      "additionalProperties": false,
      "description": "Represents a complete audience definition with a root logical expression.\nExamples:\n1. Simple audience:\n{\n\"schema_version\": \"1.0.0\",\n\"audience\": {\n\"operator\": \"and\",\n\"expressions\": [\n{ \"model\": \"user\", \"expression\": { \"operator\": \"exists\", \"operand\": { \"path\": \"id\" } } },\n{ \"model\": \"purchase\", \"expression\": { \"operator\": \"equals\", \"left\": { \"path\": \"status\" }, \"right\": \"completed\" } }\n]\n}\n}\n\n2. Audience with nested logic:\n{\n\"schema_version\": \"1.0.0\",\n\"audience\": {\n\"operator\": \"or\",\n\"expressions\": [\n{ \"model\": \"user\", \"expression\": { \"operator\": \"equals\", \"left\": { \"path\": \"country\" }, \"right\": \"US\" } },\n{\n\"operator\": \"and\",\n\"expressions\": [\n{ \"model\": \"signup\", \"expression\": { \"operator\": \"equals\", \"left\": { \"path\": \"status\" }, \"right\": \"completed\" } },\n{ \"model\": \"user\", \"expression\": { \"operator\": \"greater_than\", \"left\": { \"path\": \"age\" }, \"right\": 18 } }\n]\n}\n]\n}\n}",
      "properties": {
        "audience": {
          "$ref": "#/definitions/BoolExpression",
          "title": "Audience"
        },
        "schema_version": {
          "$ref": "#/definitions/Version"
        }
      },
      "required": [
        "schema_version",
        "audience"
      ],
      "title": "AudienceDefinition",
      "type": "object"
    },
    "AudienceBoolExpression": {
      "additionalProperties": false,
      "properties": {
        "left": {
          "$ref": "#/definitions/ModelReference"
        },
        "operator": {
          "$ref": "#/definitions/AudienceOperator"
        },
        "right": {
          "$ref": "#/definitions/AudienceReference"
        }
      },
      "required": [
        "left",
        "operator",
        "right"
      ],
      "title": "AudienceBoolExpression",
      "type": "object"
    },
    "AudienceOperator": {
      "description": "Represents operators that work with audiences. Examples:\n- \"in\": { audience: 12345, model: \"users\" }",
      "enum": [
        "in",
        "not_in"
      ],
      "type": "string"
    },
    "AudienceReference": {
      "additionalProperties": false,
      "description": "Represents an audience. Audience is identified by a string ID.\nExample:\n{ \"audience\": \"12345\" }",
      "properties": {
        "audience": {
          "type": "string"
        }
      },
      "required": [
        "audience"
      ],
      "title": "AudienceReference",
      "type": "object"
    },
    "BinaryBoolExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/AudienceBoolExpression"
        },
        {
          "$ref": "#/definitions/LocationBoolExpression"
        },
        {
          "$ref": "#/definitions/DateBoolExpression"
        },
        {
          "$ref": "#/definitions/StringBoolExpression"
        },
        {
          "$ref": "#/definitions/NumberBoolExpression"
        }
      ],
      "title": "BoolBinaryExpression"
    },
    "BinaryNumberExpression": {
      "additionalProperties": false,
      "properties": {
        "left": {
          "$ref": "#/definitions/NumberExpression"
        },
        "operator": {
          "$ref": "#/definitions/BinaryNumberOperator"
        },
        "right": {
          "$ref": "#/definitions/NumberExpression"
        }
      },
      "required": [
        "left",
        "operator",
        "right"
      ],
      "title": "BinaryNumberExpression",
      "type": "object"
    },
    "BinaryNumberOperator": {
      "description": "Represents mathematical operators for numeric calculations. Examples:\n- \"plus\": { value1: 5, value2: 3 } // result: 8\n- \"multiply\": { value1: 4, value2: 2 } // result: 8\n- \"mod\": { value1: 10, value2: 3 } // result: 1",
      "enum": [
        "plus",
        "minus",
        "multiply",
        "divide",
        "mod"
      ],
      "type": "string"
    },
    "BoolExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ValueBoolExpression"
        },
        {
          "$ref": "#/definitions/UnaryBoolExpression"
        },
        {
          "$ref": "#/definitions/BinaryBoolExpression"
        },
        {
          "$ref": "#/definitions/ManyBoolExpression"
        }
      ],
      "title": "BoolExpression"
    },
    "DateBoolExpression": {
      "additionalProperties": false,
      "properties": {
        "left": {
          "$ref": "#/definitions/DateExpression"
        },
        "operator": {
          "$ref": "#/definitions/NumberBoolOperator"
        },
        "right": {
          "$ref": "#/definitions/DateExpression"
        }
      },
      "required": [
        "left",
        "operator",
        "right"
      ],
      "title": "DateBoolExpression",
      "type": "object"
    },
    "DateExpression": {
      "$ref": "#/definitions/ValueDateExpression",
      "description": "Represents an expression that evaluates to a date",
      "title": "DateExpression"
    },
    "DateLiteral": {
      "anyOf": [
        {
          "$ref": "#/definitions/AbsoluteDate"
        },
        {
          "$ref": "#/definitions/RelativeDate"
        }
      ],
      "title": "DateLiteral"
    },
    "DateUnit": {
      "description": "Represents units of time that can be used in relative date calculations.\nExamples:\n- 'second': 1 second\n- 'minute': 60 seconds\n- 'hour': 60 minutes\n- 'day': 24 hours\n- 'week': 7 days\n- 'month': ~30 days\n- 'quarter': 3 months\n- 'year': 12 months",
      "enum": [
        "second",
        "minute",
        "hour",
        "day",
        "week",
        "month",
        "quarter",
        "year"
      ],
      "title": "DateUnit",
      "type": "string"
    },
    "DistanceUnit": {
      "enum": [
        "meters",
        "miles",
        "kilometers"
      ],
      "title": "DistanceUnit",
      "type": "string"
    },
    "Expression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ValueExpression"
        },
        {
          "$ref": "#/definitions/IUnaryExpression"
        },
        {
          "$ref": "#/definitions/IBinaryExpression"
        },
        {
          "$ref": "#/definitions/IManyExpression"
        },
        {
          "$ref": "#/definitions/IAggregateExpression"
        },
        {
          "$ref": "#/definitions/BoolExpression"
        },
        {
          "$ref": "#/definitions/NumberExpression"
        },
        {
          "$ref": "#/definitions/StringExpression"
        },
        {
          "$ref": "#/definitions/LocationExpression"
        },
        {
          "$ref": "#/definitions/DateExpression"
        },
        {
          "$ref": "#/definitions/Literal"
        }
      ],
      "description": "Represents an expression that accepts a variety of arguments and evaluates to a value.",
      "title": "Expression"
    },
    "IAggregateExpression": {
      "additionalProperties": false,
      "properties": {
        "condition": {
          "$ref": "#/definitions/Expression"
        },
        "group_by_model": {
          "type": "string"
        },
        "operand": {
          "$ref": "#/definitions/Expression"
        },
        "operator": {
          "$ref": "#/definitions/Operator"
        }
      },
      "required": [
        "group_by_model",
        "operand",
        "operator"
      ],
      "type": "object"
    },
    "IBinaryExpression": {
      "additionalProperties": false,
      "properties": {
        "left": {
          "$ref": "#/definitions/Expression"
        },
        "operator": {
          "$ref": "#/definitions/Operator"
        },
        "right": {
          "$ref": "#/definitions/Expression"
        }
      },
      "required": [
        "left",
        "operator",
        "right"
      ],
      "type": "object"
    },
    "IManyExpression": {
      "additionalProperties": false,
      "properties": {
        "expressions": {
          "items": {
            "$ref": "#/definitions/Expression"
          },
          "type": "array"
        },
        "operator": {
          "$ref": "#/definitions/Operator"
        }
      },
      "required": [
        "expressions",
        "operator"
      ],
      "type": "object"
    },
    "IUnaryExpression": {
      "additionalProperties": false,
      "properties": {
        "operand": {
          "$ref": "#/definitions/Expression"
        },
        "operator": {
          "$ref": "#/definitions/Operator"
        }
      },
      "required": [
        "operand",
        "operator"
      ],
      "type": "object"
    },
    "ListBoolOperator": {
      "description": "Represents operators that work with lists of values. Examples:\n- \"contains\": { list: [1, 2, 3], value: 2 }\n- \"between\": { list: [1, 10], value: 5 }\n- \"match_any\": { list: [\"a\", \"b\"], value: \"a\" }\n- \"in\": { list: [1, 2, 3], value: 2 }",
      "enum": [
        "contains",
        "between",
        "match_any",
        "match_all",
        "in",
        "not_in"
      ],
      "type": "string"
    },
    "Literal": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "number"
        },
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/DateLiteral"
        },
        {
          "$ref": "#/definitions/ModelPath"
        },
        {
          "$ref": "#/definitions/Location"
        },
        {
          "$ref": "#/definitions/ModelReference"
        },
        {
          "$ref": "#/definitions/AudienceReference"
        }
      ],
      "description": "Represents a value that can be used in expressions, including primitive values, paths, and arithmetic operations.\nExamples:\n1. Primitive values:\ntrue\n42\n\"hello\"\n\n2. Path reference:\n{ path: \"user.age\" }\n\n3. Arithmetic operation:\n{\noperator: \"plus\",\nleft: { path: \"price\" },\nright: { path: \"tax\" }\n}\n\n4. Nested arithmetic operation:\n{\noperator: \"multiply\",\nleft: { operator: \"plus\", left: { path: \"base_price\" }, right: { path: \"shipping\" } },\nright: 1.1\n}\n\n5. Date operand:\n{ date: { absolute: \"2023-01-01T00:00:00Z\" } }",
      "title": "Literal"
    },
    "Location": {
      "additionalProperties": false,
      "description": "Represents a geographic location, optionally with a distance constraint.\nExamples:\n1. Simple location:\n{ \"latitude\": 37.7749, \"longitude\": -122.4194 }\n\n2. Location with distance in miles:\n{ \"latitude\": 40.7128, \"longitude\": -74.0060, \"distance\": { \"value\": 10, \"unit\": \"miles\" } }\n\n3. Location with distance in kilometers:\n{ \"latitude\": 51.5074, \"longitude\": -0.1278, \"distance\": { \"value\": 5, \"unit\": \"kilometers\" } }",
      "properties": {
        "distance": {
          "additionalProperties": false,
          "properties": {
            "unit": {
              "$ref": "#/definitions/DistanceUnit"
            },
            "value": {
              "type": "number"
            }
          },
          "required": [
            "value",
            "unit"
          ],
          "type": "object"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ],
      "title": "Location",
      "type": "object"
    },
    "LocationBoolExpression": {
      "additionalProperties": false,
      "properties": {
        "left": {
          "$ref": "#/definitions/LocationExpression"
        },
        "operator": {
          "$ref": "#/definitions/LocationBoolOperator"
        },
        "right": {
          "$ref": "#/definitions/LocationExpression"
        }
      },
      "required": [
        "left",
        "operator",
        "right"
      ],
      "title": "LocationBoolExpression",
      "type": "object"
    },
    "LocationBoolOperator": {
      "description": "Represents operators for location-based comparisons. Examples:\n- \"within\": { location1: { lat: 40, lng: -74 }, location2: { lat: 40, lng: -74 }, radius: 5 }\n- \"equals\": { location1: { lat: 40, lng: -74 }, location2: { lat: 40, lng: -74 } }",
      "enum": [
        "within",
        "equals"
      ],
      "type": "string"
    },
    "LocationExpression": {
      "$ref": "#/definitions/ValueLocationExpression",
      "description": "Represents an expression that evaluates to a location or location-based condition.",
      "title": "LocationExpression"
    },
    "LogicalBoolExpression": {
      "additionalProperties": false,
      "properties": {
        "left": {
          "$ref": "#/definitions/BoolExpression"
        },
        "operator": {
          "$ref": "#/definitions/LogicalBoolOperator"
        },
        "right": {
          "$ref": "#/definitions/BoolExpression"
        }
      },
      "required": [
        "left",
        "operator",
        "right"
      ],
      "title": "LogicalBoolExpression",
      "type": "object"
    },
    "LogicalBoolOperator": {
      "description": "Represents logical operators for combining multiple conditions. Examples:\n- \"and\": { condition1: true, condition2: true } // result: true\n- \"or\": { condition1: true, condition2: false } // result: true",
      "enum": [
        "and",
        "or"
      ],
      "type": "string"
    },
    "LogicalManyBoolExpression": {
      "additionalProperties": false,
      "properties": {
        "expressions": {
          "items": {
            "$ref": "#/definitions/BoolExpression"
          },
          "type": "array"
        },
        "operator": {
          "$ref": "#/definitions/LogicalBoolOperator"
        }
      },
      "required": [
        "expressions",
        "operator"
      ],
      "title": "LogicalManyBoolExpression",
      "type": "object"
    },
    "ManyBoolExpression": {
      "$ref": "#/definitions/LogicalManyBoolExpression",
      "title": "ManyBoolExpression"
    },
    "ModelPath": {
      "additionalProperties": false,
      "description": "Represents a model path reference within a data model.\nExamples:\n1. Simple model path:\n{ \"model\": \"user\", \"path\": \"email\" }\n\n2. Nested model path:\n{ \"model\": \"order\", \"path\": \"items.productId\" }\n\n3. Deeply nested model path:\n{ \"model\": \"event\", \"path\": \"attributes.purchase.amount\" }",
      "properties": {
        "model": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      },
      "required": [
        "model",
        "path"
      ],
      "title": "ModelPath",
      "type": "object"
    },
    "ModelReference": {
      "additionalProperties": false,
      "description": "Represents a model reference within a data model",
      "properties": {
        "model": {
          "type": "string"
        }
      },
      "required": [
        "model"
      ],
      "title": "ModelReference",
      "type": "object"
    },
    "NumberBoolExpression": {
      "additionalProperties": false,
      "properties": {
        "left": {
          "$ref": "#/definitions/NumberExpression"
        },
        "operator": {
          "$ref": "#/definitions/NumberBoolOperator"
        },
        "right": {
          "$ref": "#/definitions/NumberExpression"
        }
      },
      "required": [
        "left",
        "operator",
        "right"
      ],
      "title": "NumberBoolExpression",
      "type": "object"
    },
    "NumberBoolOperator": {
      "description": "Represents binary operators that compare two values. Examples:\n- \"equals\": { value1: 5, value2: 5 }\n- \"less_than\": { value1: 3, value2: 5 }\n- \"matches\": { value1: \"pattern\", value2: \"text\" }\n- \"contains\": { value1: \"string\", value2: \"substring\" }",
      "enum": [
        "equals",
        "not_equals",
        "less_than",
        "less_than_equal",
        "greater_than",
        "greater_than_equal"
      ],
      "type": "string"
    },
    "NumberExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ValueNumberExpression"
        },
        {
          "$ref": "#/definitions/BinaryNumberExpression"
        },
        {
          "$ref": "#/definitions/AggregateNumberExpression"
        }
      ],
      "description": "Represents an expression that evaluates to a number.",
      "title": "NumberExpression"
    },
    "Operator": {
      "anyOf": [
        {
          "$ref": "#/definitions/LogicalBoolOperator"
        },
        {
          "$ref": "#/definitions/LocationBoolOperator"
        },
        {
          "$ref": "#/definitions/AggregationNumberOperator"
        },
        {
          "$ref": "#/definitions/BinaryNumberOperator"
        },
        {
          "$ref": "#/definitions/AudienceOperator"
        },
        {
          "$ref": "#/definitions/ListBoolOperator"
        },
        {
          "$ref": "#/definitions/StringBoolOperator"
        },
        {
          "$ref": "#/definitions/NumberBoolOperator"
        },
        {
          "$ref": "#/definitions/UnaryBoolOperator"
        }
      ]
    },
    "RelativeDate": {
      "additionalProperties": false,
      "description": "Represents a date/time relative to the current time.\nExamples:\n1. 7 days ago:\n{ relative: { offset: -7, unit: \"day\" } }\n\n2. Start of current month:\n{ relative: { offset: 0, unit: \"month\", boundary: \"start\" } }\n\n3. End of previous quarter:\n{ relative: { offset: -1, unit: \"quarter\", boundary: \"end\" } }",
      "properties": {
        "relative": {
          "additionalProperties": false,
          "properties": {
            "boundary": {
              "enum": [
                "start",
                "end"
              ],
              "type": "string"
            },
            "offset": {
              "type": "number"
            },
            "unit": {
              "$ref": "#/definitions/DateUnit"
            }
          },
          "required": [
            "offset",
            "unit"
          ],
          "type": "object"
        }
      },
      "required": [
        "relative"
      ],
      "title": "RelativeDate",
      "type": "object"
    },
    "StringBoolExpression": {
      "additionalProperties": false,
      "properties": {
        "left": {
          "$ref": "#/definitions/StringExpression"
        },
        "operator": {
          "$ref": "#/definitions/StringBoolOperator"
        },
        "right": {
          "$ref": "#/definitions/StringExpression"
        }
      },
      "required": [
        "left",
        "operator",
        "right"
      ],
      "title": "StringBoolExpression",
      "type": "object"
    },
    "StringBoolOperator": {
      "enum": [
        "equals",
        "not_equals",
        "matches",
        "contains",
        "not_contains",
        "starts_with",
        "not_starts_with",
        "ends_with",
        "not_ends_with",
        "in",
        "not_in"
      ],
      "type": "string"
    },
    "StringExpression": {
      "$ref": "#/definitions/ValueStringExpression",
      "title": "StringExpression"
    },
    "UnaryBoolExpression": {
      "additionalProperties": false,
      "properties": {
        "operand": {
          "$ref": "#/definitions/Expression"
        },
        "operator": {
          "$ref": "#/definitions/UnaryBoolOperator"
        }
      },
      "required": [
        "operand",
        "operator"
      ],
      "title": "UnaryBoolExpression",
      "type": "object"
    },
    "UnaryBoolOperator": {
      "description": "Represents unary operators that operate on a single value. Examples:\n- \"not\": Negates a boolean expression\n- \"exist\": Checks if a value exists",
      "enum": [
        "null",
        "not_null",
        "exists",
        "not_exists"
      ],
      "type": "string"
    },
    "ValueBoolExpression": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/ModelPath"
        }
      ],
      "title": "ValueBoolExpression"
    },
    "ValueDateExpression": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "date": {
              "$ref": "#/definitions/DateLiteral"
            }
          },
          "required": [
            "date"
          ],
          "type": "object"
        },
        {
          "$ref": "#/definitions/ModelPath"
        }
      ],
      "title": "ValueDateExpression"
    },
    "ValueExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/ValueBoolExpression"
        },
        {
          "$ref": "#/definitions/ValueDateExpression"
        },
        {
          "$ref": "#/definitions/ValueLocationExpression"
        },
        {
          "$ref": "#/definitions/ValueNumberExpression"
        },
        {
          "$ref": "#/definitions/ValueStringExpression"
        }
      ],
      "title": "ValueExpression"
    },
    "ValueLocationExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/Location"
        },
        {
          "$ref": "#/definitions/ModelPath"
        }
      ],
      "title": "ValueLocationExpression"
    },
    "ValueNumberExpression": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "$ref": "#/definitions/ModelPath"
        }
      ],
      "title": "ValueNumberExpression"
    },
    "ValueStringExpression": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/ModelPath"
        }
      ],
      "title": "ValueStringExpression"
    },
    "Version": {
      "type": [
        "string"
      ]
    },
    "isValidAudienceObject": {
      "$comment": "(obj: any) => obj is Audience",
      "properties": {
        "namedArgs": {
          "additionalProperties": false,
          "properties": {
            "obj": {
              "description": "Any object to validate"
            }
          },
          "required": [
            "obj"
          ],
          "type": "object"
        }
      },
      "type": "object"
    }
  }
}