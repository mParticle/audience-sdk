{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AbsoluteDate": {
      "additionalProperties": false,
      "description": "Represents an absolute date/time value. Examples: 1. ISO 8601 date:    { absolute: \"2023-01-01T00:00:00Z\" }\n\n2. Date only:    { absolute: \"2023-01-01\" }\n\n3. Date with timezone:    { absolute: \"2023-01-01T00:00:00-05:00\" }",
      "properties": {
        "absolute": {
          "type": "string"
        }
      },
      "required": [
        "absolute"
      ],
      "type": "object"
    },
    "AggregationOperator": {
      "description": "Represents operators for aggregating multiple values. Examples:\n- \"min\": [1, 2, 3] // result: 1\n- \"max\": [1, 2, 3] // result: 3\n- \"avg\": [1, 2, 3] // result: 2\n- \"count\": [1, 2, 3] // result: 3",
      "enum": [
        "min",
        "max",
        "sum",
        "avg",
        "list",
        "count"
      ],
      "type": "string"
    },
    "ArithmeticOperator": {
      "description": "Represents mathematical operators for numeric calculations. Examples:\n- \"plus\": { value1: 5, value2: 3 } // result: 8\n- \"multiply\": { value1: 4, value2: 2 } // result: 8\n- \"mod\": { value1: 10, value2: 3 } // result: 1",
      "enum": [
        "plus",
        "minus",
        "multiply",
        "divide",
        "mod"
      ],
      "type": "string"
    },
    "Audience": {
      "title": "AudienceDefinition",
      "additionalProperties": false,
      "description": "Represents a complete audience definition with a root logical query. Example: {   audience: {     operator: \"and\",     queries: [       { query: { models: [{ type: \"user\", id: 1 }] } },       { event: { models: [{ type: \"event\", id: 1 }], event_name: { path: \"purchase\" } } }     ]   } }",
      "properties": {
        "audience": {
          "title": "Audience",
          "additionalProperties": false,
          "properties": {
            "operator": {
              "$ref": "#/definitions/LogicalOperator"
            },
            "queries": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/LogicalAudienceQueries"
                  },
                  {
                    "$ref": "#/definitions/AudienceQuery"
                  }
                ]
              },
              "type": "array"
            },
            "version": {
              "$ref": "#/definitions/Version"
            }
          },
          "required": [
            "operator",
            "queries",
            "version"
          ],
          "type": "object"
        }
      },
      "required": [
        "audience"
      ],
      "type": "object"
    },
    "AudienceQuery": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "query": {
              "$ref": "#/definitions/Query"
            }
          },
          "required": [
            "query"
          ],
          "type": "object"
        },
        {
          "title": "EventAudienceQuery",
          "additionalProperties": false,
          "properties": {
            "event": {
              "$ref": "#/definitions/EventQuery"
            }
          },
          "required": [
            "event"
          ],
          "type": "object"
        },
        {
          "title": "UserAudienceQuery",
          "additionalProperties": false,
          "properties": {
            "user": {
              "$ref": "#/definitions/UserQuery"
            }
          },
          "required": [
            "user"
          ],
          "type": "object"
        }
      ],
      "description": "Represents a query that can be either a general query, an event query, or a user query. Examples: 1. General query:    { query: { models: [{ type: \"user\", id: 1 }], expression: { ... } } }\n\n2. Event query:    { event: { models: [{ type: \"event\", id: 1 }], event_name: { path: \"purchase\" }, attributes: { ... } } }\n\n3. User query:    { user: { models: [{ type: \"user\", id: 1 }], attributes: { ... } } }"
    },
    "BinaryOperator": {
      "description": "Represents binary operators that compare two values. Examples:\n- \"equals\": { value1: 5, value2: 5 }\n- \"less_than\": { value1: 3, value2: 5 }\n- \"matches\": { value1: \"pattern\", value2: \"text\" }\n- \"contains\": { value1: \"string\", value2: \"substring\" }",
      "enum": [
        "equals",
        "less_than",
        "less_than_equal",
        "greater_than",
        "greater_than_equal",
        "matches",
        "contains"
      ],
      "type": "string"
    },
    "CountExpression": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "additionalProperties": false,
          "properties": {
            "operand": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "$ref": "#/definitions/BinaryOperator"
            }
          },
          "required": [
            "operator",
            "operand"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "expressions": {
              "items": {
                "$ref": "#/definitions/CountExpression"
              },
              "type": "array"
            },
            "operator": {
              "$ref": "#/definitions/LogicalOperator"
            }
          },
          "required": [
            "operator",
            "expressions"
          ],
          "type": "object"
        }
      ],
      "description": "Represents an expression that evaluates to a count or count-based condition. Examples:\n\n1. Simple count value:    5\n\n2. Count with binary operator:    {      operator: \"greater_than\",      operand: { path: \"order_count\" }    }\n\n3. Logical combination of counts:    {      operator: \"and\",      expressions: [        5,        {          operator: \"greater_than\",          operand: { path: \"order_count\" }        },        {          operator: \"less_than\",          operand: 10        }      ]    }"
    },
    "DateExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/AbsoluteDate"
        },
        {
          "$ref": "#/definitions/RelativeDate"
        },
        {
          "additionalProperties": false,
          "properties": {
            "operand": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AbsoluteDate"
                },
                {
                  "$ref": "#/definitions/RelativeDate"
                }
              ]
            },
            "operator": {
              "$ref": "#/definitions/BinaryOperator"
            }
          },
          "required": [
            "operator",
            "operand"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "expressions": {
              "items": {
                "$ref": "#/definitions/DateExpression"
              },
              "type": "array"
            },
            "operator": {
              "$ref": "#/definitions/LogicalOperator"
            }
          },
          "required": [
            "operator",
            "expressions"
          ],
          "type": "object"
        }
      ],
      "description": "Represents an expression that evaluates to a date or date-based condition. Examples:\n\n1. Absolute date:    { absolute: \"2023-01-01T00:00:00Z\" }\n\n2. Relative date:    {      relative: {        offset: -30,        unit: \"day\"      }    }\n\n3. Date with binary operator:    {      operator: \"greater_than\",      operand: { absolute: \"2023-01-01T00:00:00Z\" }    }\n\n4. Logical combination of dates:    {      operator: \"and\",      expressions: [        { absolute: \"2023-01-01T00:00:00Z\" },        {          operator: \"less_than\",          operand: {            relative: {              offset: 0,              unit: \"month\",              boundary: \"end\"            }          }        }      ]    }"
    },
    "DateOperand": {
      "anyOf": [
        {
          "title": "AbsoluteDateOperand",
          "additionalProperties": false,
          "properties": {
            "date": {
              "$ref": "#/definitions/AbsoluteDate"
            }
          },
          "required": [
            "date"
          ],
          "type": "object"
        },
        {
          "title": "RelativeDateOperand",
          "additionalProperties": false,
          "properties": {
            "date": {
              "$ref": "#/definitions/RelativeDate"
            }
          },
          "required": [
            "date"
          ],
          "type": "object"
        }
      ],
      "description": "Represents a date value that can be either absolute or relative. Examples: 1. Absolute date:    { date: { absolute: \"2023-01-01T00:00:00Z\" } }\n\n2. Relative date (30 days ago):    {       date: {         relative: {          offset: -30,          unit: \"day\"        }      }     }\n\n3. Relative date (start of current month):    {       date: {         relative: {          offset: 0,          unit: \"month\",          boundary: \"start\"        }      }     }"
    },
    "DateUnit": {
      "description": "Represents units of time that can be used in relative date calculations. Examples:\n- 'second': 1 second\n- 'minute': 60 seconds\n- 'hour': 60 minutes\n- 'day': 24 hours\n- 'week': 7 days\n- 'month': ~30 days\n- 'quarter': 3 months\n- 'year': 12 months",
      "enum": [
        "second",
        "minute",
        "hour",
        "day",
        "week",
        "month",
        "quarter",
        "year"
      ],
      "type": "string"
    },
    "DistanceUnit": {
      "enum": [
        "meters",
        "miles",
        "kilometers"
      ],
      "type": "string"
    },
    "EventQuery": {
      "additionalProperties": false,
      "description": "Represents a query for event data, extending the base Query type with event-specific fields. Examples: 1. Simple event query:    {      models: [{ type: \"event\", id: 1 }],      event_name: { path: \"purchase\" }    }\n\n2. Complex event query with multiple conditions:    {      models: [        { type: \"event\", id: 1 },        { type: \"transaction\", id: 2 },        { type: \"session\", id: 3 }      ],      event_type: { path: \"commerce\" },      event_name: { path: \"purchase\" },      attributes: {        operator: \"equals\",        path: \"amount\",        value: 100      },      count: {        operator: \"greater_than\",        value: 5      },      date: {        operator: \"within\",        value: \"30d\"      },      location: {        operator: \"within\",        value: { lat: 40, lng: -74, radius: 5 }      }    }",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/SingleModelExpression"
        },
        "count": {
          "$ref": "#/definitions/CountExpression"
        },
        "date": {
          "$ref": "#/definitions/DateExpression"
        },
        "event_name": {
          "$ref": "#/definitions/PathExpression"
        },
        "event_type": {
          "$ref": "#/definitions/PathExpression"
        },
        "expression": {
          "$ref": "#/definitions/Expression"
        },
        "location": {
          "$ref": "#/definitions/LocationExpression"
        },
        "models": {
          "$ref": "#/definitions/Models"
        }
      },
      "required": [
        "models"
      ],
      "type": "object"
    },
    "Expression": {
      "anyOf": [
        {
          "title": "JoinExpression",
          "additionalProperties": false,
          "properties": {
            "expression": {
              "$ref": "#/definitions/Expression"
            },
            "model": {
              "$ref": "#/definitions/Model"
            }
          },
          "required": [
            "model",
            "expression"
          ],
          "type": "object"
        },
        {
          "title": "UnaryExpression",
          "additionalProperties": false,
          "properties": {
            "expression": {
              "$ref": "#/definitions/Expression"
            },
            "model": {
              "$ref": "#/definitions/Model"
            },
            "operator": {
              "const": "not",
              "type": "string"
            }
          },
          "required": [
            "operator",
            "expression"
          ],
          "type": "object"
        },
        {
          "title": "ExistsExpression",
          "additionalProperties": false,
          "properties": {
            "model": {
              "$ref": "#/definitions/Model"
            },
            "operand": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "const": "exists",
              "type": "string"
            }
          },
          "required": [
            "operator",
            "operand"
          ],
          "type": "object"
        },
        {
          "title": "BinaryExpression",
          "additionalProperties": false,
          "properties": {
            "left": {
              "$ref": "#/definitions/Operand"
            },
            "model": {
              "$ref": "#/definitions/Model"
            },
            "operator": {
              "$ref": "#/definitions/BinaryOperator"
            },
            "right": {
              "$ref": "#/definitions/Operand"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object"
        },
        {
          "title": "ModelAggregationLeftExpression",
          "additionalProperties": false,
          "properties": {
            "expression": {
              "$ref": "#/definitions/Expression"
            },
            "left": {
              "additionalProperties": false,
              "properties": {
                "operator": {
                  "$ref": "#/definitions/AggregationOperator"
                },
                "path": {
                  "type": "string"
                }
              },
              "required": [
                "operator",
                "path"
              ],
              "type": "object"
            },
            "model": {
              "$ref": "#/definitions/Model"
            },
            "operator": {
              "$ref": "#/definitions/BinaryOperator"
            },
            "right": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Operand"
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "expression": {
                      "$ref": "#/definitions/Expression"
                    },
                    "model": {
                      "type": "string"
                    },
                    "operator": {
                      "$ref": "#/definitions/AggregationOperator"
                    },
                    "path": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "model",
                    "operator",
                    "path",
                    "expression"
                  ],
                  "type": "object"
                }
              ]
            }
          },
          "required": [
            "model",
            "operator",
            "expression",
            "left",
            "right"
          ],
          "type": "object"
        },
        {
          "title": "ModelAggregationRightExpression",
          "additionalProperties": false,
          "properties": {
            "expression": {
              "$ref": "#/definitions/Expression"
            },
            "left": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Operand"
                },
                {
                  "title": "ModelAggregationOperand",
                  "additionalProperties": false,
                  "properties": {
                    "expression": {
                      "$ref": "#/definitions/Expression"
                    },
                    "model": {
                      "type": "string"
                    },
                    "operator": {
                      "$ref": "#/definitions/AggregationOperator"
                    },
                    "path": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "model",
                    "operator",
                    "path",
                    "expression"
                  ],
                  "type": "object"
                }
              ]
            },
            "model": {
              "$ref": "#/definitions/Model"
            },
            "operator": {
              "$ref": "#/definitions/BinaryOperator"
            },
            "right": {
              "additionalProperties": false,
              "properties": {
                "operator": {
                  "$ref": "#/definitions/AggregationOperator"
                },
                "path": {
                  "type": "string"
                }
              },
              "required": [
                "operator",
                "path"
              ],
              "type": "object"
            }
          },
          "required": [
            "model",
            "operator",
            "expression",
            "left",
            "right"
          ],
          "type": "object"
        },
        {
          "title": "LogicalExpression",
          "additionalProperties": false,
          "properties": {
            "expressions": {
              "items": {
                "$ref": "#/definitions/Expression"
              },
              "type": "array"
            },
            "model": {
              "$ref": "#/definitions/Model"
            },
            "operator": {
              "$ref": "#/definitions/LogicalOperator"
            }
          },
          "required": [
            "operator",
            "expressions"
          ],
          "type": "object"
        },
        {
          "title": "LocationLeftExpression",
          "additionalProperties": false,
          "properties": {
            "left": {
              "$ref": "#/definitions/LocationOperand"
            },
            "model": {
              "$ref": "#/definitions/Model"
            },
            "operator": {
              "$ref": "#/definitions/LocationOperator"
            },
            "right": {
              "additionalProperties": false,
              "properties": {
                "path": {
                  "type": "string"
                }
              },
              "required": [
                "path"
              ],
              "type": "object"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object"
        },
        {
          "title": "LocationRightExpression",
          "additionalProperties": false,
          "properties": {
            "left": {
              "additionalProperties": false,
              "properties": {
                "path": {
                  "type": "string"
                }
              },
              "required": [
                "path"
              ],
              "type": "object"
            },
            "model": {
              "$ref": "#/definitions/Model"
            },
            "operator": {
              "$ref": "#/definitions/LocationOperator"
            },
            "right": {
              "$ref": "#/definitions/LocationOperand"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object"
        }
      ],
      "description": "Represents a complex expression that can evaluate to true, false, or noop. Examples:\n\n1. Join expression (combining expressions from different models):    {      model: { type: \"user\", id: 1 },      expression: {        operator: \"equals\",        left: { path: \"age\" },        right: 18      }    }\n\n2. Unary expression (operating on a single value):    {      operator: \"not\",      expression: {        operator: \"equals\",        left: { path: \"status\" },        right: \"inactive\"      }    }\n\n3. Binary expression (comparing two values):    {      operator: \"greater_than\",      left: { path: \"price\" },      right: 100    }\n\n4. Binary expression with aggregation:    {      operator: \"greater_than\",      left: {         model: { type: \"order\", id: 1 },         operator: \"sum\",         path: \"amount\",        expression: {          operator: \"equals\",          left: { path: \"status\" },          right: \"completed\"        }      },      right: 1000    }\n\n5. Binary expression with aggregation on both sides:    {      operator: \"greater_than\",      left: {         model: { type: \"order\", id: 1 },         operator: \"sum\",         path: \"amount\",        expression: {          operator: \"equals\",          left: { path: \"status\" },          right: \"completed\"        }      },      right: {         model: { type: \"order\", id: 1 },         operator: \"sum\",         path: \"amount\",        expression: {          operator: \"equals\",          left: { path: \"status\" },          right: \"pending\"        }      }    }\n\n6. Logical expression (AND/OR):    {      operator: \"and\",      expressions: [        {          operator: \"equals\",          left: { path: \"country\" },          right: \"US\"        },        {          operator: \"greater_than\",          left: { path: \"age\" },          right: 18        }      ]    }\n\n7. Location expression:    {      operator: \"within\",      left: {         location: {           latitude: 37.7749,           longitude: -122.4194,          distance: { value: 10, unit: \"miles\" }        }       },      right: { path: \"user.location\" }    }"
    },
    "ListOperator": {
      "description": "Represents operators that work with lists of values. Examples:\n- \"contains\": { list: [1, 2, 3], value: 2 }\n- \"between\": { list: [1, 10], value: 5 }\n- \"match_any\": { list: [\"a\", \"b\"], value: \"a\" }\n- \"in\": { list: [1, 2, 3], value: 2 }",
      "enum": [
        "contains",
        "between",
        "match_any",
        "match_all",
        "in"
      ],
      "type": "string"
    },
    "Location": {
      "additionalProperties": false,
      "properties": {
        "distance": {
          "additionalProperties": false,
          "properties": {
            "unit": {
              "$ref": "#/definitions/DistanceUnit"
            },
            "value": {
              "type": "number"
            }
          },
          "required": [
            "value",
            "unit"
          ],
          "type": "object"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ],
      "type": "object"
    },
    "LocationExpression": {
      "anyOf": [
        {
          "$ref": "#/definitions/Location"
        },
        {
          "additionalProperties": false,
          "properties": {
            "operand": {
              "$ref": "#/definitions/Location"
            },
            "operator": {
              "$ref": "#/definitions/LocationOperator"
            }
          },
          "required": [
            "operator",
            "operand"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "expressions": {
              "items": {
                "$ref": "#/definitions/LocationExpression"
              },
              "type": "array"
            },
            "operator": {
              "$ref": "#/definitions/LogicalOperator"
            }
          },
          "required": [
            "operator",
            "expressions"
          ],
          "type": "object"
        }
      ],
      "description": "Represents an expression that evaluates to a location or location-based condition. Examples:\n\n1. Simple location:    {      latitude: 40.7128,      longitude: -74.0060,      distance: {        value: 5,        unit: \"miles\"      }    }\n\n2. Location with operator:    {      operator: \"within\",      operand: {        latitude: 40.7128,        longitude: -74.0060,        distance: {          value: 5,          unit: \"miles\"        }      }    }\n\n3. Logical combination of locations:    {      operator: \"or\",      expressions: [        {          latitude: 40.7128,          longitude: -74.0060,          distance: {            value: 5,            unit: \"miles\"          }        },        {          operator: \"within\",          operand: {            latitude: 34.0522,            longitude: -118.2437,            distance: {              value: 10,              unit: \"miles\"            }          }        }      ]    }"
    },
    "LocationOperand": {
      "additionalProperties": false,
      "description": "Represents a location value that can be used in location-based expressions. Examples: 1. Simple location (latitude/longitude only):    {      location: {        latitude: 40.7128,        longitude: -74.0060      }    }\n\n2. Location with distance:    {      location: {        latitude: 40.7128,        longitude: -74.0060,        distance: {          value: 5,          unit: \"miles\"        }      }    }\n\n3. Location with distance in meters:    {      location: {        latitude: 40.7128,        longitude: -74.0060,        distance: {          value: 1000,          unit: \"meters\"        }      }    }",
      "properties": {
        "location": {
          "$ref": "#/definitions/Location"
        }
      },
      "required": [
        "location"
      ],
      "type": "object"
    },
    "LocationOperator": {
      "description": "Represents operators for location-based comparisons. Examples:\n- \"within\": { location1: { lat: 40, lng: -74 }, location2: { lat: 40, lng: -74 }, radius: 5 }\n- \"equals\": { location1: { lat: 40, lng: -74 }, location2: { lat: 40, lng: -74 } }",
      "enum": [
        "within",
        "equals"
      ],
      "type": "string"
    },
    "LogicalAudienceQueries": {
      "additionalProperties": false,
      "description": "Represents a logical combination of audience queries using AND/OR operators. Examples: 1. Simple AND combination:    {      operator: \"and\",      queries: [        { query: { models: [{ type: \"user\", id: 1 }] } },        { event: { models: [{ type: \"event\", id: 1 }], event_name: { path: \"purchase\" } } }      ]    }\n\n2. Nested logical combinations:    {      operator: \"or\",      queries: [        { query: { models: [{ type: \"user\", id: 1 }] } },        {          operator: \"and\",          queries: [            { event: { models: [{ type: \"event\", id: 1 }] } },            { user: { models: [{ type: \"user\", id: 1 }] } }          ]        }      ]    }",
      "properties": {
        "operator": {
          "$ref": "#/definitions/LogicalOperator"
        },
        "queries": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/LogicalAudienceQueries"
              },
              {
                "$ref": "#/definitions/AudienceQuery"
              }
            ]
          },
          "type": "array"
        }
      },
      "required": [
        "operator",
        "queries"
      ],
      "type": "object"
    },
    "LogicalOperator": {
      "description": "Represents logical operators for combining multiple conditions. Examples:\n- \"and\": { condition1: true, condition2: true } // result: true\n- \"or\": { condition1: true, condition2: false } // result: true",
      "enum": [
        "and",
        "or"
      ],
      "type": "string"
    },
    "Model": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "id"
      ],
      "type": "object"
    },
    "Models": {
      "anyOf": [
        {
          "const": "all",
          "type": "string"
        },
        {
          "items": {
            "$ref": "#/definitions/Model"
          },
          "type": "array"
        }
      ]
    },
    "Operand": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "number"
        },
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/DateOperand"
        },
        {
          "title": "PathOperand",
          "additionalProperties": false,
          "properties": {
            "path": {
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "type": "object"
        },
        {
          "title": "ArithmeticOperand",
          "additionalProperties": false,
          "properties": {
            "left": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "$ref": "#/definitions/ArithmeticOperator"
            },
            "right": {
              "$ref": "#/definitions/Operand"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object"
        }
      ],
      "description": "Represents a value that can be used in expressions, including primitive values, paths, and arithmetic operations. Examples: 1. Primitive values:    - boolean: true    - number: 42    - string: \"hello\"\n\n2. Path reference:    { path: \"user.age\" }\n\n3. Arithmetic operation:    {      operator: \"plus\",      left: { path: \"price\" },      right: { path: \"tax\" }    }\n\n4. Nested arithmetic operation:    {      operator: \"multiply\",      left: {        operator: \"plus\",        left: { path: \"base_price\" },        right: { path: \"shipping\" }      },      right: 1.1  // 10% markup    }\n\n5. Date operand:    { date: { absolute: \"2023-01-01T00:00:00Z\" } }"
    },
    "PathExpression": {
      "anyOf": [
        {
          "title": "BooleanPathExpression",
          "type": "boolean"
        },
        {
          "title": "NumberPathExpression",
          "type": "number"
        },
        {
          "title": "StringPathExpression",
          "type": "string"
        },
        {
          "title": "UnaryPathExpression",
          "additionalProperties": false,
          "properties": {
            "expression": {
              "$ref": "#/definitions/PathExpression"
            },
            "operator": {
              "$ref": "#/definitions/UnaryOperator"
            }
          },
          "required": [
            "operator",
            "expression"
          ],
          "type": "object"
        },
        {
          "title": "BinaryPathExpression",
          "additionalProperties": false,
          "properties": {
            "operand": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "$ref": "#/definitions/BinaryOperator"
            }
          },
          "required": [
            "operator",
            "operand"
          ],
          "type": "object"
        }
      ],
      "description": "Represents an expression that evaluates to a path or value. Examples:\n\n1. Primitive values:    - boolean: true    - number: 42    - string: \"hello\"\n\n2. Unary expression (operating on a path):    {      operator: \"not\",      expression: {        operator: \"equals\",        left: { path: \"status\" },        right: \"inactive\"      }    }\n\n3. Binary expression (comparing a path to a value):    {      operator: \"equals\",      operand: { path: \"user.age\" }    }"
    },
    "Query": {
      "additionalProperties": false,
      "description": "Represents a base query with a model and optional expression. Examples: 1. Simple query without expression:    { models: [{ type: \"user\", id: 1 }] }\n\n2. Query with expression:    {       models: [        { type: \"user\", id: 1 },        { type: \"segment\", id: 2, name: \"high_ltv_users\" }      ],      expression: {        operator: \"equals\",        path: \"age\",        value: 25      }    }",
      "properties": {
        "expression": {
          "$ref": "#/definitions/Expression"
        },
        "models": {
          "$ref": "#/definitions/Models"
        }
      },
      "required": [
        "models"
      ],
      "type": "object"
    },
    "RelativeDate": {
      "additionalProperties": false,
      "description": "Represents a date/time relative to the current time. Examples: 1. 7 days ago:    {      relative: {        offset: -7,        unit: \"day\"      }    }\n\n2. Start of current month:    {      relative: {        offset: 0,        unit: \"month\",        boundary: \"start\"      }    }\n\n3. End of previous quarter:    {      relative: {        offset: -1,        unit: \"quarter\",        boundary: \"end\"      }    }\n\n4. Middle of next year:    {      relative: {        offset: 1,        unit: \"year\",        boundary: \"middle\"      }    }",
      "properties": {
        "relative": {
          "additionalProperties": false,
          "properties": {
            "boundary": {
              "enum": [
                "start",
                "end",
                "middle"
              ],
              "type": "string"
            },
            "offset": {
              "type": "number"
            },
            "unit": {
              "$ref": "#/definitions/DateUnit"
            }
          },
          "required": [
            "offset",
            "unit"
          ],
          "type": "object"
        }
      },
      "required": [
        "relative"
      ],
      "type": "object"
    },
    "SingleModelExpression": {
      "anyOf": [
        {
          "title": "NotSingleModelExpression",
          "additionalProperties": false,
          "properties": {
            "expression": {
              "$ref": "#/definitions/SingleModelExpression"
            },
            "operator": {
              "const": "not",
              "type": "string"
            }
          },
          "required": [
            "operator",
            "expression"
          ],
          "type": "object"
        },
        {
          "title": "ExistsSingleModelExpression",
          "additionalProperties": false,
          "properties": {
            "operand": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "const": "exists",
              "type": "string"
            }
          },
          "required": [
            "operator",
            "operand"
          ],
          "type": "object"
        },
        {
          "title": "BinarySingleModelExpression",
          "additionalProperties": false,
          "properties": {
            "left": {
              "$ref": "#/definitions/Operand"
            },
            "operator": {
              "$ref": "#/definitions/BinaryOperator"
            },
            "right": {
              "$ref": "#/definitions/Operand"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object"
        },
        {
          "title": "LogicalSingleModelExpression",
          "additionalProperties": false,
          "properties": {
            "expressions": {
              "items": {
                "$ref": "#/definitions/SingleModelExpression"
              },
              "type": "array"
            },
            "operator": {
              "$ref": "#/definitions/LogicalOperator"
            }
          },
          "required": [
            "operator",
            "expressions"
          ],
          "type": "object"
        },
        {
          "title": "LocationSingleModelExpression",
          "additionalProperties": false,
          "properties": {
            "left": {
              "$ref": "#/definitions/LocationOperand"
            },
            "operator": {
              "$ref": "#/definitions/LocationOperator"
            },
            "right": {
              "additionalProperties": false,
              "properties": {
                "path": {
                  "type": "string"
                }
              },
              "required": [
                "path"
              ],
              "type": "object"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object"
        },
        {
          "title": "LocationRightSingleModelExpression",
          "additionalProperties": false,
          "properties": {
            "left": {
              "additionalProperties": false,
              "properties": {
                "path": {
                  "type": "string"
                }
              },
              "required": [
                "path"
              ],
              "type": "object"
            },
            "operator": {
              "$ref": "#/definitions/LocationOperator"
            },
            "right": {
              "$ref": "#/definitions/LocationOperand"
            }
          },
          "required": [
            "operator",
            "left",
            "right"
          ],
          "type": "object"
        }
      ],
      "description": "Represents an expression that operates within a single model context. Examples:\n\n1. Unary expression (operating on a single value):    {      operator: \"not\",      expression: {        operator: \"equals\",        left: { path: \"status\" },        right: \"inactive\"      }    }\n\n2. Binary expression (comparing two values):    {      operator: \"greater_than\",      left: { path: \"price\" },      right: 100    }\n\n3. Logical expression group (combining multiple expressions):    {      operator: \"and\",      expressions: [        {          operator: \"equals\",          left: { path: \"country\" },          right: \"US\"        },        {          operator: \"greater_than\",          left: { path: \"age\" },          right: 18        }      ]    }\n\n4. Location expression (comparing locations):    {      operator: \"within\",      left: {        location: {          latitude: 40.7128,          longitude: -74.0060,          distance: {            value: 5,            unit: \"miles\"          }        }      },      right: { path: \"user.location\" }    }"
    },
    "UnaryOperator": {
      "description": "Represents unary operators that operate on a single value. Examples:\n- \"not\": Negates a boolean expression\n- \"exist\": Checks if a value exists",
      "enum": [
        "not",
        "exist"
      ],
      "type": "string"
    },
    "UserQuery": {
      "additionalProperties": false,
      "description": "Represents a query for user data, extending the base Query type with user-specific fields. Examples: 1. Simple user query:    {      models: [{ type: \"user\", id: 1 }],      attributes: {        operator: \"equals\",        path: \"age\",        value: 25      }    }\n\n2. Complex user query with multiple attributes:    {      models: [{ type: \"user\", id: 1 }],      attributes: {        operator: \"and\",        expressions: [          {            operator: \"equals\",            path: \"country\",            value: \"US\"          },          {            operator: \"greater_than\",            path: \"age\",            value: 18          }        ]      }    }",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/SingleModelExpression"
        },
        "expression": {
          "$ref": "#/definitions/Expression"
        },
        "models": {
          "$ref": "#/definitions/Models"
        }
      },
      "required": [
        "attributes",
        "models"
      ],
      "type": "object"
    },
    "Version": {
      "type": [
        "string"
      ]
    }
  }
}
